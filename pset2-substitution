//libraries
#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

//formula declarations
int key_check(int a, string b);
string encipher(string key, string plaintext);

//main
int main(int argc, string argv[])
{
    //GET KEY
    int check = key_check(argc, argv[1]); //formula that checks that only 2 arguments in command line and key input by user is valid.

    if (check == 0)
    {
        //GET PLAINTEXT
        string plaintext = get_string("plaintext: ");

        //ENCIPHER & PRINT CIPHERTEXT
        string k = argv[1];

        printf("ciphertext: %s\n", encipher(k, plaintext)); //carries out encipher function and prints ciphertext.
    }

    else
    {
        return 1; //returns 1 if wrong type of or no key given in command line argument.
    }
}

//formulas
int key_check(int a, string b)
{
    bool check1 = false;
    bool check2 = false;
    bool check3 = false;

    //CHECK 1: checks that only 2 arguments are in the command line.
    if (a == 2)
    {
        check1 = true; //if right number of command line arguments given.

        //CHECK 2: checks that string or 'key' characters are all letters.
        int i = 0;
        while (isalpha(b[i]) != 0)
        {
            i++;
        }

        if (i == 26 && strlen(b) == 26)
        {
            check2 = true;
        }

        //CHECK 3: checks that no duplicate letters are in key
        bool dup = false;
        int j = 0;
        while (b[j] != '\0')
        {
            for (int l = j + 1; b[l] != '\0'; l++)
            {
                if (b[j] == b[l])
                {
                    dup = true;
                }
            }
            j++;
        }
        if (dup == false)
        {
            check3 = true;
        }
    }

    //Final check to ensure all above checks are true.
    if (check1 == true && check2 == true && check3 == true)
    {
        return 0;
    }

    else if (check1 == true && check2 == false && check3 == true)
    {
        printf("Key must contain 26 characters.\n"); //prints this if key has too few characters.
        return 1;
    }

    else if (check1 == true && check2 == true && check3 == false)
    {
        printf("Key must not contain duplicate characters.\n"); //prints this if key has duplicate characters.
        return 1;
    }

    //If both checks not true then user is prompted for a new key.
    else
    {
        printf("Usage: ./substitution key\n"); //prints this if too many or too few command line arguments given.
        return 1;
    }
}

string encipher(string key, string plaintext) //formula to encipher a string of plaintext by an integer 'key'.
{
    string ciphertext = plaintext; //ciphertext begins as copy of plaintext.
    int i = 0;
    while (plaintext[i] != '\0') //while loop to go through all chars of plaintext
    {
        char c = plaintext[i];
        int alpha = isalpha(c); //checks if char is an alphabetical letter.
        int upper = isupper(c); //checks if char is an uppercase letter.

        if (alpha == 0) //if not an alphabetical letter then no change is made. i.e. punctuation and numbers stay as they are.
        {
            ciphertext[i] = c; //changes ciphertext array accordingly.
        }
        else //if alphabetical letter then following is undertaken.
        {
            if (upper != 0) //if uppercase letter
            {
                int l = c - 65; //65 used based an ASCII decimal chart
                ciphertext[i] = key[l];
                if (isupper(ciphertext[i]) == 0)
                {
                    ciphertext[i] = toupper(ciphertext[i]);
                }
            }
            else
            {
                int l = c - 97; //97 used based an ASCII decimal chart
                ciphertext[i] = key[l];
                if (isupper(ciphertext[i]) != 0)
                {
                    ciphertext[i] = tolower(ciphertext[i]);
                }
            }
        }

        i++;
    }
    return ciphertext; //returns string ciphertext which is dictated by key given.
}
